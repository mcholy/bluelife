// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace BlueLife.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiasRecompra")
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Localizacion")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Referencia")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.HasIndex("ProductoId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Entities.Models.Movimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TipoMovimientoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoMovimientoId");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("Entities.Models.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApMaterno")
                        .HasColumnType("longtext");

                    b.Property<string>("ApPaterno")
                        .HasColumnType("longtext");

                    b.Property<string>("Celular")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Documento")
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4431275-31ee-4afd-8dd7-953329a54599"),
                            ApMaterno = "de alguien",
                            ApPaterno = "algo",
                            Celular = "999999999",
                            DateEntry = new DateTime(2023, 7, 22, 4, 58, 24, 588, DateTimeKind.Utc).AddTicks(9853),
                            DateModify = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direccion = "Lima",
                            Documento = "00000000",
                            Estado = "A",
                            IdUserEntry = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            IdUserModify = new Guid("00000000-0000-0000-0000-000000000000"),
                            Nombre = "Messi"
                        },
                        new
                        {
                            Id = new Guid("f3a071c6-80ec-43ac-8cef-1f1e5d6b8410"),
                            ApMaterno = "familia",
                            ApPaterno = "de",
                            Celular = "999999999",
                            DateEntry = new DateTime(2023, 7, 22, 4, 58, 24, 588, DateTimeKind.Utc).AddTicks(9871),
                            DateModify = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direccion = "Lima",
                            Documento = "00000000",
                            Estado = "A",
                            IdUserEntry = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            IdUserModify = new Guid("00000000-0000-0000-0000-000000000000"),
                            Nombre = "Cristiano"
                        });
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Entities.Models.Reparto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comentario")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoReparto")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TrabajadorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("Repartos");
                });

            modelBuilder.Entity("Entities.Models.RepartoDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RepartoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("RepartoId");

                    b.ToTable("RepartoDetalles");
                });

            modelBuilder.Entity("Entities.Models.TipoMovimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimientos");
                });

            modelBuilder.Entity("Entities.Models.TipoTrabajador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoTrabajadores");
                });

            modelBuilder.Entity("Entities.Models.TipoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoUsuarios");
                });

            modelBuilder.Entity("Entities.Models.Trabajador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Alias")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TipoTrabajadorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.HasIndex("TipoTrabajadorId");

                    b.ToTable("Trabajadores");
                });

            modelBuilder.Entity("Entities.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Contrasenia")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModify")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IdUserEntry")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUserModify")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TipoUsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Entities.Models.Cliente", b =>
                {
                    b.HasOne("Entities.Models.Persona", "Persona")
                        .WithOne("Cliente")
                        .HasForeignKey("Entities.Models.Cliente", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("Clientes")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.Movimiento", b =>
                {
                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("Movimientos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TipoMovimiento", "TipoMovimiento")
                        .WithMany("Movimientos")
                        .HasForeignKey("TipoMovimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("Entities.Models.Reparto", b =>
                {
                    b.HasOne("Entities.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("TrabajadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.Models.RepartoDetalle", b =>
                {
                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("RepartoDetalles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Reparto", "Reparto")
                        .WithMany("RepartoDetalles")
                        .HasForeignKey("RepartoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Reparto");
                });

            modelBuilder.Entity("Entities.Models.Trabajador", b =>
                {
                    b.HasOne("Entities.Models.Persona", "Persona")
                        .WithOne("Trabajador")
                        .HasForeignKey("Entities.Models.Trabajador", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TipoTrabajador", "TipoTrabajador")
                        .WithMany("Trabajadores")
                        .HasForeignKey("TipoTrabajadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoTrabajador");
                });

            modelBuilder.Entity("Entities.Models.Usuario", b =>
                {
                    b.HasOne("Entities.Models.Persona", "Persona")
                        .WithOne("Usuario")
                        .HasForeignKey("Entities.Models.Usuario", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TipoUsuario", "TipoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("Entities.Models.Persona", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Trabajador");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Movimientos");

                    b.Navigation("RepartoDetalles");
                });

            modelBuilder.Entity("Entities.Models.Reparto", b =>
                {
                    b.Navigation("RepartoDetalles");
                });

            modelBuilder.Entity("Entities.Models.TipoMovimiento", b =>
                {
                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("Entities.Models.TipoTrabajador", b =>
                {
                    b.Navigation("Trabajadores");
                });

            modelBuilder.Entity("Entities.Models.TipoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
